{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortFields","goodsFromServer","App","useState","sortField","setSortField","hasReversed","setHasReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAOKA,E,oFAAAA,K,YAAAA,E,iBAAAA,M,KAUE,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA+BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,YAEPI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAAWc,KACd,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAAWgB,OACd,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,EACKI,EAAcQ,UAGhBR,EAMcS,CACnBlB,EACA,CAAEG,YAAWE,gBAGf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaL,EAAWc,OACvCQ,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcJ,EAAWc,OAJzC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaL,EAAWgB,SACvCM,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAcJ,EAAWgB,SAJzC,4BAUA,wBACEK,QAAS,kBAAMd,GAAgBD,IAC/BgB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAA4B,IAAhBjB,IAJhB,sBAUEA,GAAeF,IACf,wBACEkB,KAAK,SACLD,QAAS,WACPd,GAAe,GACfF,EAAa,KAEfe,UAAU,4BANZ,sBAaJ,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5fe9b2df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\ntype Goods = string[];\n\nenum SortFields {\n  Name = 'name',\n  Length = 'length',\n}\n\ninterface FilterParams {\n  sortField: string;\n  hasReversed: boolean;\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: Goods,\n  { sortField, hasReversed }: FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortFields.Name:\n          return good1.localeCompare(good2);\n\n        case SortFields.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (hasReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [hasReversed, setHasReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, hasReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortFields.Name)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortFields.Name,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortFields.Length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortFields.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setHasReversed(!hasReversed)}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': hasReversed !== true,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(hasReversed || sortField) && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setHasReversed(false);\n              setSortField('');\n            }}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}